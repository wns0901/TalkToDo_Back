name: Build and Deploy to EC2

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Gradle 설정
        uses: gradle/actions/setup-gradle@v4.0.0

      - name: gradlew 에 실행 권한 부여
        run: chmod +x gradlew

      - name: Gradle Wrapper 로 빌드
        run: ./gradlew build -x test

      - name: DockerHub 로그인
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build, Push Docker image
        run: |
          docker build -f ./Dockerfile -t wns0901/talktodo-server:latest .
          docker push wns0901/talktodo-server:latest

      - name: .env 파일 생성
        run: |
          echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" > .env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
          echo "SPRING_MAIL_USERNAME=${{ secrets.SPRING_MAIL_USERNAME }}" >> .env
          echo "SPRING_MAIL_PASSWORD=${{ secrets.SPRING_MAIL_PASSWORD }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "CLOUD_AWS_S3_BUCKET=${{ secrets.CLOUD_AWS_S3_BUCKET }}" >> .env
          echo "CLOUD_AWS_REGION_STATIC=${{ secrets.CLOUD_AWS_REGION_STATIC }}" >> .env
          echo "CLOUD_AWS_CREDENTIALS_ACCESS_KEY=${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESS_KEY }}" >> .env
          echo "CLOUD_AWS_CREDENTIALS_SECRET_KEY=${{ secrets.CLOUD_AWS_CREDENTIALS_SECRET_KEY }}" >> .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env

      - name: .env 파일 업로드
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: ".env"
          target: "/home/ubuntu/TalkToDo"
          strip_components: 0

      - name: docker-compose.yml 파일 업로드
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/TalkToDo"
          strip_components: 0

      - name: SSL 인증서 파일들 생성
        run: |
          echo "${{ secrets.CA_BUNDLE_CRT }}" > ca_bundle.crt
          echo "${{ secrets.CERTIFICATE_CRT }}" > certificate.crt
          echo "${{ secrets.PRIVATE_KEY }}" > private.key

      - name: 기존 SSL 파일 정리
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "🧹 기존 SSL 파일 정리 중..."
            sudo rm -f /home/ubuntu/TalkToDo/ssl/ca_bundle.crt
            sudo rm -f /home/ubuntu/TalkToDo/ssl/certificate.crt
            sudo rm -f /home/ubuntu/TalkToDo/ssl/private.key
            echo "✅ 기존 SSL 파일 정리 완료"

      - name: SSL 인증서 파일들 업로드
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "ca_bundle.crt,certificate.crt,private.key"
          target: "/home/ubuntu/TalkToDo/ssl"
          strip_components: 0

      - name: Nginx 설정 파일 업로드
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "nginx.conf"
          target: "/home/ubuntu/TalkToDo"
          strip_components: 0

      - name: EC2 에서 배포 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ubuntu/TalkToDo

            # Docker 설치 확인 및 설치
            if ! command -v docker &> /dev/null; then
              echo "🐳 Docker가 설치되어 있지 않습니다. Docker를 설치합니다..."
              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -a -G docker ubuntu
              echo "✅ Docker 설치가 완료되었습니다."
            else
              echo "✅ Docker가 이미 설치되어 있습니다."
            fi

            # Docker Compose 설치 확인 및 설치
            if ! command -v docker-compose &> /dev/null; then
              echo "🐳 Docker Compose를 설치합니다..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              echo "✅ Docker Compose 설치가 완료되었습니다."
            else
              echo "✅ Docker Compose가 이미 설치되어 있습니다."
            fi

            # Docker 로그인
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

            # 기존 컨테이너 정리
            sudo docker stop $(sudo docker ps -aq) 2>/dev/null || true
            sudo docker rm $(sudo docker ps -aq) 2>/dev/null || true

            # Docker Compose로 배포
            sudo /usr/local/bin/docker-compose pull
            sudo /usr/local/bin/docker-compose up -d

            # 배포 후 상태 확인
            echo "🔍 배포 상태 확인 중..."
            sleep 30

            # 컨테이너 상태 확인
            sudo docker ps -a

            # 포트 상태 확인
            sudo netstat -tlnp | grep :8080 || echo "포트 8080이 열려있지 않습니다"

            # 애플리케이션 로그 확인
            sudo docker-compose logs --tail=20

            echo "✅ Docker 배포가 완료되었습니다!"
            echo "🌐 애플리케이션 접속: http://${{ secrets.EC2_HOST }}:8080"

            # Nginx 설치 확인 및 설치
            echo "📦 Nginx 설치 확인 중..."
            if ! command -v nginx &> /dev/null; then
              echo "🐳 Nginx가 설치되어 있지 않습니다. Nginx를 설치합니다..."
              sudo apt-get update
              sudo apt-get install -y nginx
              sudo systemctl enable nginx
              echo "✅ Nginx 설치가 완료되었습니다."
            else
              echo "✅ Nginx가 이미 설치되어 있습니다."
            fi

            # SSL 인증서 파일 권한 설정
            echo "🔐 SSL 인증서 파일 권한 설정 중..."
            sudo chmod 644 /home/ubuntu/TalkToDo/ssl/certificate.crt
            sudo chmod 644 /home/ubuntu/TalkToDo/ssl/ca_bundle.crt
            sudo chmod 600 /home/ubuntu/TalkToDo/ssl/private.key
            sudo chown -R root:root /home/ubuntu/TalkToDo/ssl

            # Nginx 설정 파일 적용
            echo "⚙️ Nginx 설정 적용 중..."
            sudo cp /home/ubuntu/TalkToDo/nginx.conf /etc/nginx/sites-available/talktodo
            sudo ln -sf /etc/nginx/sites-available/talktodo /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default

            # Nginx 설정 테스트
            echo "🧪 Nginx 설정 테스트 중..."
            sudo nginx -t

            if [ $? -eq 0 ]; then
              echo "✅ Nginx 설정이 올바릅니다."
              
              # Nginx 재시작
              echo "🔄 Nginx 재시작 중..."
              sudo systemctl restart nginx
              
              # Nginx 상태 확인
              echo "📋 Nginx 상태 확인:"
              sudo systemctl status nginx --no-pager
              
              echo "🎉 SSL 설정이 완료되었습니다!"
              echo "🔒 HTTPS 접속: https://api-talktodo.kro.kr"
              echo "📊 포트 상태:"
              sudo netstat -tlnp | grep -E ":80|:443|:8080"
              
              # 보안 그룹 확인 (EC2 인스턴스에서)
              echo "🔍 보안 그룹 확인:"
              echo "80 포트 확인:"
              sudo netstat -tlnp | grep :80 || echo "80 포트가 열려있지 않습니다"
              echo "443 포트 확인:"
              sudo netstat -tlnp | grep :443 || echo "443 포트가 열려있지 않습니다"
              echo "8080 포트 확인:"
              sudo netstat -tlnp | grep :8080 || echo "8080 포트가 열려있지 않습니다"
              
              # Nginx 상태 상세 확인
              echo "📋 Nginx 상세 상태:"
              sudo systemctl status nginx --no-pager -l
              
              # Nginx 설정 파일 확인
              echo "📄 Nginx 설정 파일 확인:"
              sudo nginx -T | grep -E "listen|server_name"
            else
              echo "❌ Nginx 설정에 오류가 있습니다."
              exit 1
            fi
